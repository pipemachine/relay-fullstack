schema {
  query: Query
}

type Feature implements Node {
  id: ID!
  name: String
  description: String
  url: String
}

type FeatureConnection {
  pageInfo: PageInfo!
  edges: [FeatureEdge]
}

type FeatureEdge {
  node: Feature
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  results(before: String, after: String, first: Int, last: Int, searchStr: String): ResultConnection
  search: Search
  viewer: User
}

type Result implements Node {
  id: ID!
  name: String
  price: String
  url: String
  image: String
}

type ResultConnection {
  pageInfo: PageInfo!
  edges: [ResultEdge]
}

type ResultEdge {
  node: Result
  cursor: String!
}

type Search implements Node {
  id: ID!
  results(before: String, after: String, first: Int, last: Int, searchStr: String): ResultConnection
  searchTerm: String
}

type User implements Node {
  id: ID!
  features(after: String, first: Int, before: String, last: Int): FeatureConnection
  username: String
  website: String
}
